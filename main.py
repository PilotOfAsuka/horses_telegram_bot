import asyncio
import random

from func.global_var import game_states, set_game_state, set_count_state, user_count_date
from aiogram.exceptions import TelegramRetryAfter, TelegramBadRequest
from aiogram.types import Message
from aiogram.filters import Command

from aiogram.enums.parse_mode import ParseMode

from misc import bot, dp




horses = ['üêé', 'üê¥', 'üèá']
bets = {}
track_length = 20  # –î–ª–∏–Ω–∞ —Ç—Ä–∞—Å—Å—ã



@dp.message(Command("horse_help"))
async def start(message: Message):
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–∫–∞—á–∫–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /race –¥–ª—è –Ω–∞—á–∞–ª–∞ –≥–æ–Ω–∫–∏.')


async def countdown(message: Message, start: int = 5):
    for i in range(start, 0, -1):
        await message.edit_text(f"–ì–æ–Ω–∫–∞ –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ {i} —Å–µ–∫—É–Ω–¥...")
        await asyncio.sleep(1)
    await message.edit_text("–ì–æ–Ω–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!")


async def check_game(msg):
    chat_id = str(msg.chat.id)
    if game_states.get(chat_id) is True:
        await msg.answer(text="–ì–æ–Ω–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
    else:
        await race(msg)

@dp.message(Command("race"))
async def start_race(msg: Message):
    await check_game(msg)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞–≤–æ–∫
@dp.message(Command("pay"))
async def pay_bet(message: Message):

    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
        _, amount, number = message.text.split()
        amount = int(amount)
        number = int(number)

        if amount <= 0 or number <= 0:
            await message.reply("–°—É–º–º–∞ –∏ —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏!")
            return

        user_id = message.from_user.id
        chat_id = message.chat.id
        username = str(message.from_user.first_name)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —á–∞—Ç–∞, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
        if chat_id not in bets:
            bets[chat_id] = {}

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
        bets[chat_id][user_id] = {
            'user_id': user_id,
            'username': username,
            'amount': amount,
            'number': number
        }

        await message.reply(f"{username} —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É: —Å—É–º–º–∞ {amount}, –ª–æ—à–∞–¥—å: {number}")

    except ValueError:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /pay —Å—É–º–º–∞ —á–∏—Å–ª–æ")


async def race(message: Message):
    chat_id = message.chat.id
    if chat_id not in bets or not bets[chat_id] or game_states.get(chat_id) is True:
        await message.answer("–°—Ç–∞–≤–æ–∫ –Ω–µ—Ç!")
        return
    set_game_state(message, state=True)
    race_message = await message.answer("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≥–æ–Ω–∫–µ...")
    await countdown(race_message)  # –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –≥–æ–Ω–∫–∏

    positions = [track_length - 1, track_length - 1, track_length - 1]  # –ù–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –ª–æ—à–∞–¥–µ–π
    await race_message.edit_text('–°–∫–∞—á–∫–∏ –Ω–∞—á–∞–ª–∏—Å—å!\n' + render_race(positions), parse_mode=ParseMode.MARKDOWN)

    while min(positions) > 0:
        await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏, —É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–æ 2 —Å–µ–∫—É–Ω–¥ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
        new_positions = [pos - random.randint(0, 2) for pos in positions]
        if new_positions != positions:
            positions = new_positions
            try:
                await race_message.edit_text('–°–∫–∞—á–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è!\n' + render_race(positions),
                                             parse_mode=ParseMode.MARKDOWN)
            except TelegramRetryAfter as e:
                await asyncio.sleep(e.retry_after)
            except TelegramBadRequest:
                pass

    winner_number = positions.index(min(positions)) + 1

    await announce_winner(race_message, winner_number)





async def announce_winner(race_message: Message, winner_number: int):
    chat_id = race_message.chat.id
    await race_message.delete()
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π

    winners = [bet for bet in bets[chat_id].values() if bet['number'] == winner_number]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    results = f"–ü–æ–±–µ–¥–∏–ª–∞ –ª–æ—à–∞–¥—å –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º: {winner_number}\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
    total_pot = sum(bet['amount'] for bet in bets[chat_id].values())

    if winners:
        # –†–∞–∑–¥–µ–ª–∏—Ç—å –≤—ã–∏–≥—Ä—ã—à –º–µ–∂–¥—É –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏
        split_amount = total_pot // len(winners)
        for winner in winners:
            results += f"{winner['username']} –≤—ã–∏–≥—Ä–∞–ª {split_amount}!\n"
            print(user_count_date.get(winner['user_id']))
            if user_count_date.get(winner['user_id']) is None:
                set_count_state(user_id=winner['user_id'], state=split_amount)
            else:
                old_count = user_count_date.get(winner['user_id'])
                new_count = split_amount + old_count
                set_count_state(user_id=winner['user_id'], state=new_count)
    else:
        results += "–ù–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π!\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    await race_message.answer(text=results, parse_mode=ParseMode.MARKDOWN)
    # –û—á–∏—â–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å—Ç–∞–≤–æ–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
    bets[chat_id].clear()
    set_game_state(race_message, state=False)


def render_race(positions):
    track = [[' ' for _ in range(track_length)] for _ in range(len(horses))]
    race_track = ""

    for i, pos in enumerate(positions):
        if pos < 0:
            pos = 0
        track[i][pos] = horses[i]

    for i, row in enumerate(track):
        race_track += f"–õ–æ—à–∞–¥—å {i + 1}: |" + ''.join(row) + "|\n"
    return race_track


async def startup_task():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    message_tasks = []

    try:
        loop.run_until_complete(asyncio.gather(startup_task()))

    finally:
        loop.close()
